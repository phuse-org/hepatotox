---
title: "Figure 5 Program Code"
author: "Dimple Patel"
format: html
editor: visual
---

```{r warning=FALSE, echo=FALSE, comment=FALSE}
library(dplyr)
library(tidyr)
library(shiny)
library(ggplot2)
library(patchwork)
library(magrittr)

#Load Biomarker and AE datasets.----
load(file = "/cloud/project/Raw Data/Raw Data Output/biowidef5.Rda")
load(file = "/cloud/project/Raw Data/Raw Data Output/biolongf5.Rda")          
load(file = "/cloud/project/Raw Data/Raw Data Output/adaef5.Rda")   

#Create list of unique patient IDs.----
patients <- unique(biolongf5$PatientID)

#Define study_days if not already done
study_days <- seq(-28, 100, by = 14) 

#UI.----
ui <- fluidPage(
  titlePanel("Figure 5"),
    sidebarPanel(
      selectInput("patient", "Select Patient ID", choices = patients, selected = patients[1])
    ),
    mainPanel(
      plotOutput("comboPlot", height = "650px")
    )
  )


# Server.----
server <- function(input, output) {
  
  output$comboPlot <- renderPlot({
    patient_id <- input$patient
    
    patient_biomarkers <- biolongf5 %>% filter(PatientID == patient_id)
    patient_ae <- adaef5 %>% filter(PatientID == patient_id)
    
    x_limits <- c(-28, 100)
    

    p1 <- ggplot(patient_biomarkers, aes(x = StudyDay, y = Value, color = Marker)) +
      geom_point(size = 3) +
      geom_line(aes(linetype = Marker), size = 1) +
      scale_y_continuous("ALT, AST, TBILI, ALK, GGT (x ULN)", limits = c(0, 13), 
      breaks = c(1, 3, 5, 10, 13)) +
      theme_minimal() +
      labs(color = NULL, linetype = NULL) + 
      theme(
        legend.position = "top",
        plot.background = element_rect(color = "black", fill = NA, linewidth = 1),
        legend.text = element_text(size = 14),
        axis.title.x = element_blank(),  
        axis.text.x = element_blank(),  
        axis.ticks.x = element_blank(),
        axis.text.y = element_text(size = 14),         
        axis.title.y = element_text(size = 14),        
        plot.title = element_text(size = 18)
      ) +
      scale_x_continuous("", limits = x_limits, breaks = study_days, expand = c(0, 0)) +
      ggtitle(paste("Patient", patient_id, " Profile of Subjects of Interest")) +
      geom_hline(yintercept = c(0, 1, 3, 5, 10), linetype = "dashed", color = "gray40") +
      geom_segment(aes(x = 0, xend = 0, y = 13, yend = -Inf), 
               linetype = "dashed", color = "gray40", size = 1) 
    
    # Bottom plot: AE Timeline.----
  p2 <- ggplot(patient_ae, aes(y = AE)) +
    geom_segment(aes(x = StartDay, xend = EndDay, yend = AE, color = AE), size = 7) + 
    geom_text(aes(x = StartDay - 2, label = AE), hjust = 1, color = "black", size = 6) +
    scale_x_continuous(
      name = "Study Day",
      limits = x_limits,
      breaks = study_days,      # match p1
      expand = c(0, 0)          # ensures tight alignment
    ) +
    theme_minimal() +
    theme(
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank(),
      legend.position = "none",
      plot.background = element_blank(),  # removed border to avoid seam
      axis.title.x = element_text()       # ensures x-axis label shows (optional)
    ) +
    scale_x_continuous(
      name = "Study Day",
      limits = x_limits,
      breaks = study_days,  # match p1
      expand = c(0, 0)     # ensures tight alignment
    ) +
    theme(
      axis.title.y = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank(),
      legend.position = "none",
      plot.background = element_blank(),  # removed border to avoid seam
      #axis.title.x = element_text(),      # ensures x-axis label shows
      axis.ticks.x = element_line(color = "black"),  # Add black tick marks on x-axis
      axis.line.x = element_line(color = "black"),    # Add black x-axis line
      axis.text.x = element_text(size = 14),
      axis.title.x = element_text(size = 14)
    )

    # Remove individual plot borders
      p1 <- p1 + theme(plot.background = element_blank())
      p2 <- p2 + theme(plot.background = element_blank())
      
    # Add vertical dashed line to both p1 and p2 at x = 0.
      vertical_line <- geom_vline(xintercept = 0, linetype = "dashed", color = "gray40", size = 1)

    # Combine plots.----
      combined_plot <- (p1 / p2) +
      plot_layout(heights = c(2, 1)) +
      plot_annotation(theme = theme(plot.background = element_rect(color = "black", fill = NA, linewidth = 1))) +
      vertical_line
      
      combined_plot
  })
}

#Run the app.----
shinyApp(ui = ui, server = server)

 
```
