yref = "y",
line = list(color = "black")
))) %>%
add_annotations(
x= 1.25,
y= .25,
text = "ULN",
showarrow = F,
textangle = 270,
font = list(color = "red")
) %>%
add_annotations(
x= .27,
y= 1.3,
text = "ULN",
showarrow = F,
font = list(color = "red")
) %>%
add_annotations(
x= .15,
y= .5,
text = "LLN",
showarrow = F,
textangle = 270,
font = list(color = "blue")
) %>%
add_annotations(
x= .5,
y= .2,
text = "LLN",
showarrow = F,
font = list(color = "blue")
)
plotalp <- plot_ly(adlb2shift %>% filter(ACTARMCD == "PL" & PARAMCD == "ALP"),
x = ~BASExr,
y = ~AVALr,
type = 'scatter',
color = ~ACTARMCD,
symbol = ~ACTARMCD,
mode = 'markers',
name = "Placebo",
marker = list(color = "aquamarine")) %>%
add_trace(data = adlb2shift %>% filter(ACTARMCD == "T1" & PARAMCD == "ALP"),
x = ~BASExr,
y = ~AVALr,
type = 'scatter',
color = ~ACTARMCD,
symbol = ~ACTARMCD,
mode = 'markers',
marker = list(color = "lightslategray"),
name = "Treatment 1") %>%
add_trace(data = adlb2shift %>% filter(ACTARMCD == "T2" & PARAMCD == "ALP"),
x = ~BASExr,
y = ~AVALr,
type = 'scatter',
color = ~ACTARMCD,
symbol = ~ACTARMCD,
mode = 'markers',
marker = list(color = "hotpink"),
name = "Treatment 2") %>%
layout(title = "Scatterplot of Baseline Versus Maximum Values for ALP\n<Analysis Set>",
xaxis = list(title = "Maximum Baseline Measures (Unit: U/L)"),
yaxis = list(title = 'Max. Post-baseline Measures (Unit: U/L)'),
legend=list(title=list(text='<b> Treatment </b>')),
shapes = list(
list(
type = "line",
x0 = 44,
x1 = 44,
y0 = 0,
y1 = 250,
line = list(color = "blue", dash = "dash")
),
list(
type = "line",
x0 = 147,
x1 = 147,
y0 = 0,
y1 = 250,
line = list(color = "darkred", dash = "dash")
),
list(
type = "line",
x0 = 0,
x1 = 250,
y0 = 44,
y1 = 44,
line = list(color = "blue", dash = "dash")
),
list(
type = "line",
x0 = 0,
x1 = 250,
y0 = 147,
y1 = 147,
line = list(color = "darkred", dash = "dash")
),
list(
type = "line",
x0 = 0,
x1 = ~max(250, 250),
xref = "x",
y0 = 0,
y1 = ~max(250, 250),
yref = "y",
line = list(color = "black")
))) %>%
add_annotations(
x= 150,
y= 34,
text = "ULN",
showarrow = F,
textangle = 270,
font = list(color = "red")
) %>%
add_annotations(
x= 34,
y= 153,
text = "ULN",
showarrow = F,
font = list(color = "red")
) %>%
add_annotations(
x= 47,
y= 34,
text = "LLN",
showarrow = F,
textangle = 270,
font = list(color = "blue")
) %>%
add_annotations(
x= 34,
y= 48,
text = "LLN",
showarrow = F,
font = list(color = "blue")
)
output$subtitles <- renderUI({
switch(isolate(input$Plot),
"ALT" = HTML(paste("Scatterplot and Shift Table Summary of Absolute Lab Values for ALT",
"Max baseline vs. Max Post-baseline",  sep="<br/>")),
"AST" = HTML(paste("Scatterplot and Shift Table Summary of Absolute Lab Values for AST
Max baseline vs. Max Post-baseline",  sep="<br/>")),
"Total Bilirubin" = HTML(paste("Scatterplot and Shift Table Summary of Absolute Lab Values for Total Bilirubin Max baseline vs. Max Post-baseline",  sep="<br/>")),
"ALP" = HTML(paste("Scatterplot and Shift Table Summary of Absolute Lab Values for ALP
Max baseline vs. Max Post-baseline",  sep="<br/>")))
})
output$footnote1 <- renderText({
HTML("LLN=Lower limit of normal; ULN=Upper limit of normal; if the limits (LLN and ULN) vary across the population, the limits that apply to the majority of subjects are displayed in the scatter plot.The black diagonal line represents no change from max. baseline to max. post-baseline.")
})
output$Plots = renderPlotly({
switch(isolate(input$Plot),
"ALT" = plotalt,
"AST" = plotast,
"Total Bilirubin" = plottbili,
"ALP" = plotalp
)
})
output$Tables = render_gt({
switch(isolate(input$Plot),
"ALT" = finalt3,
"AST" = finast3,
"Total Bilirubin" = fintbili3,
"ALP" = finalp3
)
})
})}
#Output final ShinyApp.
shinyApp(uix, server)
adlbflagsastn1
contast
print(contast1)
print(contast)
adlbflagsast2
adlbflagsast
adlbflagsastn1
adlbflagsastn2
table(adlbflagsast$EVFLAG2)
View(adlbflagsalpn2)
View(adlbflagsalpn2)
knit_with_parameters("C:/Users/Dimple/Desktop/PHUSE/PHUSE Hepatotoxicity White Paper/README.Rmd")
install.packages("tinytex")
install.packages(c("usethis", "credentials"))
## set your user name and email:
usethis::use_git_config(user.name = "dimpz4295", user.email = "dimplepatel22a@gmail.com")
# ----------------------------------------------------------------------------
### 3. Configure github with Rstudio ############################################
## create a personal access token for authentication:
usethis::create_github_token()
## set personal access token:
credentials::set_github_pat()
df_trial <- read.csv("clinicaltrial.csv")
library(readr)
clinicaltrial_csv <- read_csv("C:/Users/Dimple/Desktop/PHUSE/CAMIS/CAMIS/clinicaltrial.csv.csv")
View(clinicaltrial_csv)
class(clinicaltrial_csv)
install.packages("emmeans")
df_trial <-  clinicaltrials_csv
clinicaltrials_csv
View(clinicaltrial_csv)
df_trial <-  clinicaltrial_csv
library(emmeans)
# Simulate an example dataset for Poisson Regression
set.seed(123)
example_data <- data.frame(
count = rpois(100, lambda = 2),
predictor = rnorm(100)
)
# Display the first few rows of the dataset
head(example_data)
print(clinicaltrial)
#For reproducibility
set.seed(123)
#Define number of subjects
n_subjects <- 30  # Multiple of 3 for equal group sizes
# Create SubjectID
SubjectID <- 1:n_subjects
#Assign drug groups: C, A, E
drug <- rep(c("C", "A", "E"), each = n_subjects / 3)
#Generate 'pre' values
pre <- sample(148:153, n_subjects, replace = TRUE)
#Generate 'post' values: slightly lower than 'pre'
post <- pre - sample(1:5, n_subjects, replace = TRUE)
#Combine into a data frame
clinicaltrial <- data.frame(SubjectID, drug, pre, post)
print(clinicaltrial)
View(clinicaltrial)
View(clinicaltrial)
setwd("C:/Users/Dimple/Desktop/PHUSE/CAMIS/CAMIS/")
library(readr)
library(magrittr)
library(emmeans)
lm(formula = post ~ pre + drug, data = clinicaltrial_csv) %>%
emmeans("drug") %>%
contrast(method = list(
"C vs A"  = c(-1,  1, 0),
"E vs CA" = c(-1, -1, 2)
))
setwd("C:/Users/Dimple/Desktop/PHUSE/CAMIS/CAMIS/")
library(readr)
library(magrittr)
library(emmeans)
clinicaltrial_csv <- read_csv("clinicaltrial.csv")
clinicaltrial_csv$drug <- factor(clinicaltrial_csv$drug, levels = c("C", "A", "E"))
model <- lm(post ~ pre + drug, data = clinicaltrial_csv)
emmeans(model, "drug") %>%
contrast(
method = list(
"C vs A"  = c(-0.5, 0.5, 0),   # Divided by 2
"E vs CA" = c(-1/3, -1/3, 2/3) # Divided by 3, since divisor=6 in
#SAS with coefficients summing to 6
)
)
clinicaltrial_csv$drug <- factor(clinicaltrial_csv$drug, levels = c("C", "A", "E"))
model <- lm(post ~ pre + drug, data = clinicaltrial_csv)
emmeans(model, "drug") %>%
contrast(
method = list(
"C vs A"  = c(-0.5, 0.5, 0),   # Divided by 2
"E vs CA" = c(-1/6, -1/6, 2/6) # Divided by 6
)
)
system("git --version")
install.packages("PSIAIMS")
install.packages("usethis")
library(usethis)
usethis::use_git_remote(
name = "upstream",
url = "https://github.com/PSIAIMS/CAMIS.git"
)
usethis::create_from_github(
"https://github.com/dimpz4295/CAMIS.git",
destdir = "C:/Users/Dimple/Desktop/PHUSE"
)
cp C:/Users/Dimple/Desktop/anova-sas-r.qmd
cp ~/Users/Dimple/Desktop/anova-sas-r.qmd
cp C:/Users/Dimple/Desktop/anova-sas-r.qmd.
getwd
getwd()
setwd("C:/Users/Dimple/PSAIMS/CAMIS")
setwd("C:/Users/Dimple/PHUSE/CAMIS")
library(dplyr)
library(tern)
library(random.cdisc.data)
library(tidyverse)
library(magrittr)
library(r2rtf)
library(formatters)
library(grid)
library(shiny)
library(plotly)
#Set working directory
setwd("C:/Users/Dimple/Desktop/PHUSE/PHUSE Hepatotoxicity White Paper/")
#Load an ADLB dataset.
load(file = "adlbsetf1.Rda")
#Load ADSL for future treatment arm reference.
load(file = "adslsetf1.Rda")
#NAs are explicit missing levels.
adlb2aa <- df_explicit_na(adlbf1)
#Rename the treatment arms & parameter codes.
levels(adlb2aa$ACTARMCD) <- c("T1", "PL", "T2")
levels(adslf1$ACTARMCD) <- c("T1", "PL", "T2")
levels(adlb2aa$ARM) <- c("Treatment 1", "Placebo", "Treatment 2")
levels(adlb2aa$PARAMCD) <- c("ALP", "ALT", "AST", "TBILI")
adlb2aa$PARAMCD <- factor(adlb2aa$PARAMCD, levels = c("ALT", "AST", "TBILI", "ALP"))
adlb2aa$PARAM <- factor(adlb2aa$PARAM, levels = c("Alanine Aminotransferase Measurement", "Aspartate Aminotransferase Measurement", "Total Bilirubin Measurement", "Alkaline Phosphatase Measurement"))
adlb2aa$ACTARMCD <- factor(adlb2aa$ACTARMCD, levels = c("PL", "T1", "T2"))
adslf1$ACTARMCD <- factor(adslf1$ACTARMCD, levels = c("PL", "T1", "T2"))
levels(adslf1$ARM) <- c("Treatment 1", "Placebo", "Treatment 2")
adlb2a <- adlb2aa %>% add_column(RUNNUM=runif(nrow(.)))
#Flag the maximum post-baseline result.
adlb2b <- adlb2a %>% filter(SAFFL == "Y" & AVISITN %in% c(1, 2)) %>%
group_by(USUBJID, PARAMCD) %>% slice_max(AVAL) %>% mutate(MPBR = "Y")
#Calculate AVAL in terms of ULN for PARAMCD == (TBILI, ALT,AST, ALP).
adlb2c <- adlb2b %>% filter(PARAMCD %in% c("ALT", "AST", "TBILI", "ALP") & MPBR == "Y") %>%
mutate(MAXU = case_when(PARAMCD == "ALT" ~ AVAL/55, PARAMCD == "AST" ~ AVAL/33, PARAMCD == "ALP" ~ AVAL/147), MAXUB = case_when(PARAMCD == "TBILI" ~ AVAL/1.2))
adlb2all1 <- pivot_wider(adlb2c, id_cols = SUBJID, names_from = PARAMCD, values_from = c(MAXU, MAXUB, AVISIT))
adlb2all2 <- merge(x = adlb2all1, y = adslf1[ , c("SUBJID", "ACTARMCD", "ARM")], by = "SUBJID", all.x = TRUE) %>% mutate(ALTr = round(MAXU_ALT, 3), ASTr = round(MAXU_AST, 3), ALPr = round(MAXU_ALP, 3), TBILIr = round(MAXUB_TBILI, 3)) %>%
subset(select = c(SUBJID, ACTARMCD, ARM,  ALTr, ASTr, ALPr, TBILIr, AVISIT_ALT, AVISIT_AST))
#Create RShiny app's UI and Server Components.
ui = navbarPage("Figure 1",
uiOutput("all"),
tabPanel("Plot",
icon = icon("chart-area"),
sidebarLayout(sidebarPanel(
selectInput("Plot", "Please select a Liver Biochemial Test to view:",
choices = c("ALT",
"AST",
"ALP")),
actionButton("submit", "Submit")),
mainPanel(
titlePanel("Figure 1"),
plotlyOutput(outputId = "Plots")
))))
server = function(input, output, session) {
observeEvent(input$submit,{
plotalt <- plot_ly(adlb2all2 %>% filter(ACTARMCD == "PL"),
x = ~ALTr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
name = "Placebo",
marker = list(color = "aquamarine"),
hoverinfo = "text",
hovertext = ~paste("Subject: ", SUBJID, '<br>Arm:', ARM, '<br>Visit:', AVISIT_ALT,
'<br> x-axis:', ALTr, '<br> y-axis:', TBILIr)) %>%
add_trace(data = adlb2all2 %>% filter(ACTARMCD == "T1"),
x = ~ALTr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
marker = list(color = "lightslategray"),
name = "Treatment 1") %>%
add_trace(data = adlb2all2 %>% filter(ACTARMCD == "T2"),
x = ~ALTr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
marker = list(color = "hotpink"),
name = "Treatment 2") %>%
layout(title = "Plot of Maximum Total Bilirubin Versus Maximum ALT or AST or ALP\n<Analysis Set>",
xaxis = list(title = "Alanine Aminotransferase/ULN", showgrid = FALSE),
yaxis = list(title = 'Bilirubin/ULN', showgrid = FALSE),
plot_bgcolor = "white",
paper_bgcolor = "white",
shapes = list(
list(
type = "line",
x0 = 0,
x1 = 20,
y0 = 2,
y1 = 2,
line = list(color = "darkgray", width = 1.6, dash = "dash")
),
list(
type = "line",
x0 = 3,
x1 = 3,
y0 = 0,
y1 = 12,
line = list(color = "darkgray", width = 1.6, dash = "dash")
)
))
plotast <- plot_ly(adlb2all2 %>% filter(ACTARMCD == "PL"),
x = ~ASTr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
name = "Placebo",
marker = list(color = "aquamarine"),
hoverinfo = "text",
hovertext = ~paste("Subject: ", SUBJID, '<br>Arm:', ARM, '<br>Visit:', AVISIT_AST,
'<br> x-axis:', ASTr, '<br> y-axis:', TBILIr)) %>%
add_trace(data = adlb2all2 %>% filter(ACTARMCD == "T1"),
x = ~ASTr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
marker = list(color = "lightslategray"),
name = "Treatment 1") %>%
add_trace(data = adlb2all2 %>% filter(ACTARMCD == "T2"),
x = ~ASTr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
marker = list(color = "hotpink"),
name = "Treatment 2") %>%
layout(title = "Plot of Maximum Total Bilirubin Versus Maximum ALT or AST or ALP\n<Analysis Set>",
xaxis = list(title = "Aspartate Aminotransferase/ULN", showgrid = FALSE),
yaxis = list(title = 'Bilirubin/ULN', showgrid = FALSE),
plot_bgcolor = "white",
paper_bgcolor = "white",
shapes = list(
list(
type = "line",
x0 = 0,
x1 = 20,
y0 = 2,
y1 = 2,
line = list(color = "darkgray", width = 1.6, dash = "dash")
),
list(
type = "line",
x0 = 3,
x1 = 3,
y0 = 0,
y1 = 12,
line = list(color = "darkgray", width = 1.6, dash = "dash")
)
))
plotalp <- plot_ly(adlb2all2 %>% filter(ACTARMCD == "PL"),
x = ~ALPr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
name = "Placebo",
marker = list(color = "aquamarine"),
hoverinfo = "text",
hovertext = ~paste("Subject: ", SUBJID, '<br>Arm:', ARM, '<br>Visit:', AVISIT_AST,
'<br> x-axis:', ASTr, '<br> y-axis:', TBILIr)) %>%
add_trace(data = adlb2all2 %>% filter(ACTARMCD == "T1"),
x = ~ALPr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
marker = list(color = "lightslategray"),
name = "Treatment 1") %>%
add_trace(data = adlb2all2 %>% filter(ACTARMCD == "T2"),
x = ~ALPr,
y = ~TBILIr,
type = 'scatter',
color = ~ACTARMCD,
mode = 'markers',
marker = list(color = "hotpink"),
name = "Treatment 2") %>%
layout(title = "Plot of Maximum Total Bilirubin Versus Maximum ALT or AST or ALP\n<Analysis Set>",
xaxis = list(title = "Aspartate Aminotransferase/ULN", showgrid = FALSE),
yaxis = list(title = 'Bilirubin/ULN', showgrid = FALSE),
plot_bgcolor = "white",
paper_bgcolor = "white",
shapes = list(
list(
type = "line",
x0 = 0,
x1 = 5,
y0 = 2,
y1 = 2,
line = list(color = "darkgray", width = 1.6, dash = "dash")
),
list(
type = "line",
x0 = 2,
x1 = 2,
y0 = 0,
y1 = 12,
line = list(color = "darkgray", width = 1.6, dash = "dash")
)
))
output$Plots = renderPlotly({
switch(isolate(input$Plot),
"ALT" = plotalt,
"AST" = plotast,
"ALP" = plotalp
)
})
})}
shinyApp(ui, server)
rsconnect::setAccountInfo(name='rxu6nu-dimple-patel', token='0E3B53C3D92E52216CC1133178B5B619', secret='tCCiF91IIA7voLlBnuiDelBcuZGtvydyisDePEOt')
rsconnect::setAccountInfo(name='rxu6nu-dimple-patel', token='0E3B53C3D92E52216CC1133178B5B619', secret='tCCiF91IIA7voLlBnuiDelBcuZGtvydyisDePEOt')
library(Rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
\rsconnect::setAccountInfo(name='rxu6nu-dimple-patel', token='0E3B53C3D92E52216CC1133178B5B619', secret='tCCiF91IIA7voLlBnuiDelBcuZGtvydyisDePEOt')
rsconnect::setAccountInfo(name='rxu6nu-dimple-patel', token='0E3B53C3D92E52216CC1133178B5B619', secret='tCCiF91IIA7voLlBnuiDelBcuZGtvydyisDePEOt')
library(rsconnect)
rsconnect::setAccountInfo(name='rxu6nu-dimple-patel', token='0E3B53C3D92E52216CC1133178B5B619', secret='tCCiF91IIA7voLlBnuiDelBcuZGtvydyisDePEOt')
rsconnect::deployApp()
#*Table 1*
#Install and upload appropriate packages.
library(pdftools)
#*Table 1*
#Install and upload appropriate packages.
install.packages("pdftools")
library(pdftools)
